// script.js - JavaScript file for ChemoTwin Simulator

// Helper function to create floating particles
function createParticles() {
    // Get the particles container element
    const particlesContainer = document.getElementById('particles');
    
    // Loop to create 50 particles
    for (let i = 0; i < 50; i++) {
        // Create a new div element for the particle
        const particle = document.createElement('div');
        
        // Set the class name for styling
        particle.className = 'particle';
        
        // Set random left position
        particle.style.left = Math.random() * 100 + '%';
        
        // Set random animation delay
        particle.style.animationDelay = Math.random() * 20 + 's';
        
        // Set random animation duration between 20-30 seconds
        particle.style.animationDuration = (20 + Math.random() * 10) + 's';
        
        // Append the particle to the container
        particlesContainer.appendChild(particle);
    }
}

// Function to toggle advanced options visibility
function toggleAdvanced() {
    // Get the advanced options element
    const options = document.getElementById('advancedOptions');
    
    // Toggle the 'active' class to show/hide
    options.classList.toggle('active');
}

// Function to switch tabs and update content dynamically
function switchTab(tabName) {
    // Get all tab buttons
    const tabs = document.querySelectorAll('.tab');
    
    // Remove 'active' class from all tabs
    tabs.forEach(tab => tab.classList.remove('active'));
    
    // Add 'active' class to the clicked tab
    event.target.classList.add('active');

    // Get all tab content sections
    const contents = document.querySelectorAll('.tab-content');
    
    // Remove 'active' class from all contents
    contents.forEach(content => content.classList.remove('active'));
    
    // Add 'active' class to the selected tab content
    document.getElementById(tabName).classList.add('active');

    // Check if current risks data exists and update specific tabs
    if (tabName === 'prediction' && window.currentRisks) {
        // Update prediction chart
        updatePredictionChart(window.currentRisks);
        
        // Update side effects analysis
        updateSideEffectsAnalysis(window.currentRisks);
    }
    
    if (tabName === 'timeline' && window.currentRisks) {
        // Update treatment timeline
        updateTreatmentTimeline(window.currentRisks);
    }
    
    if (tabName === 'complications' && window.currentRisks) {
        // Update complication log
        updateComplicationLog(window.currentRisks);
    }
}

// Variable to store current view mode
let currentView = 'doctor';

// Function to switch between doctor and patient views
function switchView(mode) {
    // Update current view
    currentView = mode;
    
    // Get all doctor-specific tabs
    const doctorTabs = document.querySelectorAll('.tab:not([data-patient])');
    
    // Get patient overview element
    const patientOverview = document.getElementById('patientOverview');
    
    // Get complications tab
    const complications = document.getElementById('complications');
    
    // Get patient complications element
    const patientComplications = document.getElementById('patientComplications');

    if (mode === 'patient') {
        // Hide doctor tabs
        doctorTabs.forEach(tab => tab.style.display = 'none');
        
        // Show patient overview
        patientOverview.style.display = 'block';
        
        // Hide doctor actions in complications
        complications.querySelector('p').style.display = 'none';
        
        // Show patient complications
        patientComplications.style.display = 'block';
        
        // Switch to overview tab
        switchTab('overview');
    } else {
        // Show doctor tabs
        doctorTabs.forEach(tab => tab.style.display = 'inline-block');
        
        // Hide patient overview
        patientOverview.style.display = 'none';
        
        // Show doctor actions in complications
        complications.querySelector('p').style.display = 'block';
        
        // Hide patient complications
        patientComplications.style.display = 'none';
        
        // Switch to overview tab
        switchTab('overview');
    }
    
    // If current risks exist, update views
    if (window.currentRisks) {
        updateViews(window.currentRisks);
    }
}

// Asynchronous function to initialize WebLLM
async function initLLM() {
    // Initialize the LLM with specified model and backend
    const llm = await window.WebLLM.init({
        model: 'LLaMA-7B',
        backend: 'webgpu'
    });
    
    // Return the initialized LLM
    return llm;
}

// Function to generate a virtual patient profile
function generateVirtualPatient() {
    // Generate random age between 20 and 100
    const age = Math.floor(Math.random() * 80) + 20;
    
    // Select sex, fallback to random if not selected
    const sex = document.getElementById('sex').value || ['male', 'female'][Math.floor(Math.random() * 2)];
    
    // Random cancer type
    const cancer = ['leukemia', 'lymphoma'][Math.floor(Math.random() * 2)];
    
    // Random chronic diseases
    const chronics = [[['diabetes', 'hypertension'][Math.floor(Math.random() * 2)], 'none'][Math.floor(Math.random() * 2)]];
    
    // Random temperature between 36.5 and 38.0
    const temp = (36.5 + Math.random() * 1.5).toFixed(1);
    
    // Random blood pressure
    const bp = `${Math.floor(Math.random() * 60) + 100}/${Math.floor(Math.random() * 40) + 60}`;
    
    // Random heart rate between 60 and 120
    const hr = Math.floor(Math.random() * 60) + 60;

    // Select avatar URL based on sex
    let avatarUrl = '';
    if (sex === 'male') {
        avatarUrl = 'https://i.pravatar.cc/150?img=3'; // Example male avatar
    } else {
        avatarUrl = 'https://i.pravatar.cc/150?img=5'; // Example female avatar
    }

    // Get the profile element
    const profile = document.getElementById('virtualPatientProfile');
    
    // Set the inner HTML for the profile
    profile.innerHTML = `
        <img src="${avatarUrl}" alt="Virtual Patient Avatar">
        <strong>Virtual Patient Profile:</strong><br>
        Age: ${age}<br>
        Sex: ${sex}<br>
        Cancer: ${cancer}<br>
        Chronic Diseases: ${chronics.join(', ')}<br>
        Temperature: ${temp}°C<br>
        Blood Pressure: ${bp} mmHg<br>
        Heart Rate: ${hr} bpm
    `;
    
    // Display the profile
    profile.style.display = 'block';

    // Auto-fill input fields
    document.getElementById('age').value = age;
    document.getElementById('sex').value = sex;
    document.getElementById('cancer').value = cancer;
    
    // Select chronic diseases in the dropdown
    const chronicSelect = document.getElementById('chronicDiseases');
    for (let option of chronicSelect.options) {
        option.selected = chronics.includes(option.value);
    }
    
    document.getElementById('temperature').value = temp;
    document.getElementById('bloodPressure').value = bp;
    document.getElementById('heartRate').value = hr;
    
    // Trigger analysis update
    generateAnalysis();
}

// Variables for cumulative dose tracking
let cumulativeDose = 0;
let doseSessions = [];

// Function to add a dose session
function addDoseSession() {
    // Get the session dose value
    const sessionDose = parseInt(document.getElementById('sessionDose').value);
    
    // Validate the dose
    if (sessionDose > 0 && sessionDose <= 100) {
        // Add to cumulative dose
        cumulativeDose += sessionDose;
        
        // Push to dose sessions array
        doseSessions.push(sessionDose);
        
        // Alert the user
        alert(`Session dose of ${sessionDose} mg/m² added. Cumulative dose: ${cumulativeDose} mg/m²`);
        
        // Clear the input
        document.getElementById('sessionDose').value = '';
        
        // Trigger analysis
        generateAnalysis();
    } else {
        // Alert invalid dose
        alert('Please enter a valid dose between 1 and 100 mg/m².');
    }
}

// Function to calculate risks based on inputs
function calculateRisks(age, sex, dose, cancer, followup, rate, temp, bp, hr, chronics) {
    // Calculate cardiotoxicity risk
    let cardioRisk = 0;
    if (dose > 600) cardioRisk = 36;
    else if (dose > 550) cardioRisk = 18;
    else if (dose > 500) cardioRisk = 4;
    cardioRisk += (age > 60 ? 5 : 0) + (sex === 'female' ? 2 : 0) + (followup > 5 ? 3 : 0) + (rate > 1.5 ? 2 : 0);
    if (chronics.includes('diabetes')) cardioRisk += 10;
    if (chronics.includes('hypertension')) cardioRisk += 8;
    if (hr > 100 || parseInt(bp.split('/')[0]) > 140) cardioRisk += 5;
    cardioRisk = Math.min(100, cardioRisk + (Math.random() * 5));

    // Calculate nausea risk
    let nauseaRisk = 80 + (age < 40 ? 10 : 0) + (sex === 'female' ? 5 : 0) + (temp > 37.5 ? 5 : 0);

    // Calculate neutropenia risk
    let neutroRisk = 50 + (dose / 500 * 10) + (cancer === 'leukemia' || cancer === 'lymphoma' ? 15 : 0);
    if (chronics.includes('diabetes')) neutroRisk += 5;

    // Calculate anemia risk
    let anemiaRisk = 40 + (dose / 500 * 30);

    // Calculate thrombocytopenia risk
    let thrombocytopeniaRisk = 30 + (dose / 500 * 20);

    // Calculate hepatotoxicity risk
    let hepatoRisk = dose > 400 ? 20 + (dose / 500 * 10) : 10;

    // Calculate nephrotoxicity risk
    let nephroRisk = dose > 450 ? 15 + (dose / 500 * 5) : 5;

    // Calculate neurotoxicity risk
    let neuroRisk = dose > 300 ? 25 + (dose / 500 * 10) : 10;

    // Calculate mucositis risk
    let mucositisRisk = 40 + (dose / 500 * 20);

    // Calculate alopecia risk
    let alopeciaRisk = 90;

    // Calculate fatigue risk
    let fatigueRisk = 70 + (dose / 500 * 20);

    // Array to hold complications
    let complications = [];
    
    // Add cardiotoxicity complication if risk high
    if (cardioRisk > 25) {
        complications.push('Cardiotoxicity: High risk of cardiomyopathy and heart failure. Possible acute heart attack if risk >50%. Management: Use dexrazoxane, monitor ECG. <a href="https://www.youtube.com/watch?v=6_tqPHgP2-g" target="_blank">More Info (Video)</a>');
    }
    
    // Add neutropenia complication if risk high
    if (neutroRisk > 60) {
        complications.push('Neutropenia: Increased infection risk. Management: Antibiotics, G-CSF. <a href="https://www.medicalnewstoday.com/articles/chemotherapy-induced-neutropenia" target="_blank">More Info</a>');
    }
    
    // Add anemia complication if risk high
    if (anemiaRisk > 50) {
        complications.push('Anemia: Fatigue and shortness of breath. Management: Transfusions, ESAs. <a href="https://www.youtube.com/watch?v=ZsSwFKrcvqM" target="_blank">More Info (Video)</a>');
    }
    
    // Add thrombocytopenia complication if risk high
    if (thrombocytopeniaRisk > 40) {
        complications.push('Thrombocytopenia: Bleeding risk. Management: Platelet transfusions. <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC9152964/" target="_blank">More Info</a>');
    }
    
    // Add hepatotoxicity complication if risk high
    if (hepatoRisk > 15) {
        complications.push('Hepatotoxicity: Liver enzyme elevation. Management: Monitor LFTs, supportive care. <a href="https://www.ncbi.nlm.nih.gov/books/NBK548622/" target="_blank">More Info</a>');
    }
    
    // Add nephrotoxicity complication if risk high
    if (nephroRisk > 10) {
        complications.push('Nephrotoxicity: Kidney damage. Management: Hydration, dose adjustment. <a href="https://www.frontiersin.org/journals/pharmacology/articles/10.3389/fphar.2025.1585965/full" target="_blank">More Info</a>');
    }
    
    // Add neurotoxicity complication if risk high
    if (neuroRisk > 20) {
        complications.push('Neurotoxicity (Chemo Brain): Cognitive issues. Management: Cognitive therapy, rest. <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10499694/" target="_blank">More Info</a>');
    }
    
    // Add mucositis complication if risk high
    if (mucositisRisk > 30) {
        complications.push('Mucositis: Mouth sores. Management: Oral hygiene, cryotherapy. <a href="https://www.youtube.com/watch?v=5U8jIiX-zjI" target="_blank">More Info (Video)</a>');
    }
    
    // Add alopecia complication if risk high
    if (alopeciaRisk > 80) {
        complications.push('Alopecia: Hair loss. Management: Wigs, scalp cooling. <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5540831/" target="_blank">More Info</a>');
    }
    
    // Always add extravasation complication
    complications.push('Extravasation: Tissue damage if leaked. Management: Cold compress, dexrazoxane. <a href="https://www.youtube.com/watch?v=tNVUf_WcRZ8" target="_blank">More Info (Video)</a>');

    // Add heart attack warning if cardio risk very high
    if (cardioRisk > 50) {
        complications.push('Warning: High risk of unfortunate heart attack. Immediate monitoring required.');
    }

    // Return the risks object
    return {
        cardioRisk: Math.min(100, cardioRisk),
        nauseaRisk: Math.min(100, nauseaRisk),
        neutroRisk: Math.min(100, neutroRisk),
        anemiaRisk: Math.min(100, anemiaRisk),
        thrombocytopeniaRisk: Math.min(100, thrombocytopeniaRisk),
        hepatoRisk: Math.min(100, hepatoRisk),
        nephroRisk: Math.min(100, nephroRisk),
        neuroRisk: Math.min(100, neuroRisk),
        mucositisRisk: Math.min(100, mucositisRisk),
        alopeciaRisk: Math.min(100, alopeciaRisk),
        fatigueRisk: Math.min(100, fatigueRisk),
        complications,
        dose,
        bp,
        hr,
        temp
    };
}

// Function to initialize Three.js for 3D visualization
function initThreeJS() {
    // Get the container element
    const container = document.getElementById('threeDContainer');
    
    // Create a new Three.js scene
    const scene = new THREE.Scene();
    
    // Create a perspective camera
    const camera = new THREE.PerspectiveCamera(75, container.offsetWidth / 300, 0.1, 1000);
    
    // Create a WebGL renderer
    const renderer = new THREE.WebGLRenderer();
    
    // Set renderer size
    renderer.setSize(container.offsetWidth, 300);
    
    // Append renderer to container
    container.appendChild(renderer.domElement);

    // Create sphere geometry
    const geometry = new THREE.SphereGeometry(5, 32, 32);
    
    // Create basic material
    const material = new THREE.MeshBasicMaterial({ color: 0xff6347, wireframe: true });
    
    // Create mesh
    const sphere = new THREE.Mesh(geometry, material);
    
    // Add mesh to scene
    scene.add(sphere);

    // Set camera position
    camera.position.z = 15;

    // Animation function
    function animate() {
        // Request next animation frame
        requestAnimationFrame(animate);
        
        // Rotate sphere
        sphere.rotation.x += 0.01;
        sphere.rotation.y += 0.01;
        
        // Render scene
        renderer.render(scene, camera);
    }
    
    // Start animation
    animate();
}

// Function to update prediction chart
function updatePredictionChart(risks) {
    // Get canvas context
    const predCtx = document.getElementById('predictionChart').getContext('2d');
    
    // Destroy existing chart if exists
    if (window.predChart) window.predChart.destroy();
    
    // Create new chart
    window.predChart = new Chart(predCtx, {
        type: 'line',
        data: {
            labels: ['Now', '1 Year', '5 Years'],
            datasets: [
                { label: 'Cardiotoxicity Risk (%)', data: [risks.cardioRisk, risks.cardioRisk * 1.1, risks.cardioRisk * 1.3], borderColor: '#dc3545', fill: false },
                { label: 'Neutropenia Risk (%)', data: [risks.neutroRisk, risks.neutroRisk * 1.05, risks.neutroRisk * 1.2], borderColor: '#6c757d', fill: false },
                { label: 'Anemia Risk (%)', data: [risks.anemiaRisk, risks.anemiaRisk * 1.1, risks.anemiaRisk * 1.25], borderColor: '#ffc107', fill: false },
                { label: 'Hepatotoxicity Risk (%)', data: [risks.hepatoRisk, risks.hepatoRisk * 1.05, risks.hepatoRisk * 1.15], borderColor: '#fd7e14', fill: false },
                { label: 'Neurotoxicity Risk (%)', data: [risks.neuroRisk, risks.neuroRisk * 1.1, risks.neuroRisk * 1.2], borderColor: '#28a745', fill: false }
            ]
        },
        options: { scales: { y: { beginAtZero: true, max: 100 } } }
    });
}

// Function to update side effects analysis
function updateSideEffectsAnalysis(risks) {
    // Array of side effects with risks
    const sideEffects = [
        { effect: 'Cardiotoxicity', risk: risks.cardioRisk > 15 ? 'High' : 'Moderate' },
        { effect: 'Neutropenia', risk: risks.neutroRisk > 50 ? 'High' : 'Moderate' },
        { effect: 'Anemia', risk: risks.anemiaRisk > 40 ? 'High' : 'Moderate' },
        { effect: 'Thrombocytopenia', risk: risks.thrombocytopeniaRisk > 30 ? 'High' : 'Moderate' },
        { effect: 'Nausea and Vomiting', risk: risks.nauseaRisk > 70 ? 'High' : 'Moderate' },
        { effect: 'Mucositis', risk: risks.mucositisRisk > 40 ? 'High' : 'Moderate' },
        { effect: 'Hepatotoxicity', risk: risks.hepatoRisk > 20 ? 'High' : 'Low' },
        { effect: 'Nephrotoxicity', risk: risks.nephroRisk > 15 ? 'High' : 'Low' },
        { effect: 'Neurotoxicity (Chemo Brain)', risk: risks.neuroRisk > 25 ? 'High' : 'Moderate' },
        { effect: 'Hair Loss (Alopecia)', risk: risks.alopeciaRisk > 80 ? 'High' : 'Moderate' },
        { effect: 'Urine Discoloration', risk: 'Common' },
        { effect: 'Fatigue', risk: risks.fatigueRisk > 70 ? 'High' : 'Moderate' },
        { effect: 'Injection Site Reactions', risk: risks.rate > 1.5 ? 'High' : 'Low' },
        { effect: 'Nail and Skin Changes', risk: 'Moderate' },
        { effect: 'Cough or Hoarseness with Fever', risk: 'Less Common' },
        { effect: 'Darkening or Redness of Skin (post-radiation)', risk: 'Less Common' },
        { effect: 'Fast/Irregular Heartbeat', risk: risks.cardioRisk > 20 ? 'High' : 'Less Common' },
        { effect: 'Fever or Chills', risk: risks.neutroRisk > 60 ? 'High' : 'Less Common' },
        { effect: 'Joint Pain', risk: 'Less Common' },
        { effect: 'Lower Back/Side Pain with Fever', risk: 'Less Common' },
        { effect: 'Pain at Injection Site', risk: 'Less Common' },
        { effect: 'Painful/Difficult Urination with Fever', risk: 'Less Common' },
        { effect: 'Red Streaks Along Injected Vein', risk: 'Less Common' },
        { effect: 'Shortness of Breath', risk: risks.cardioRisk > 20 ? 'High' : 'Less Common' },
        { effect: 'Stomach Pain', risk: 'Less Common' },
        { effect: 'Swelling of Feet/Lower Legs', risk: 'Less Common' }
    ];
    
    // Get the analysis element
    const sideEffectsAnalysis = document.getElementById('sideEffectsAnalysis');
    
    // Generate HTML for side effects
    sideEffectsAnalysis.innerHTML = sideEffects.map(se => `<p><strong>${se.effect}:</strong> ${se.risk} risk</p>`).join('');
}

// Function to update treatment timeline
function updateTreatmentTimeline(risks) {
    // Array of timeline items
    const timelineItems = [
        { week: 0, desc: 'Initial Assessment & Simulation' },
        { week: 1, desc: 'Start Doxorubicin Therapy' },
        { week: 2, desc: `Monitor Neutropenia/Anemia/Thrombocytopenia (Risks: ${risks.neutroRisk.toFixed(1)}% / ${risks.anemiaRisk.toFixed(1)}% / ${risks.thrombocytopeniaRisk.toFixed(1)}%)` },
        { week: 6, desc: `Echocardiogram for Cardiotoxicity (Risk: ${risks.cardioRisk.toFixed(1)}%)` },
        { week: 12, desc: 'Evaluate Response & Adjust Dose for Leukemia/Lymphoma' }
    ];
    
    // Get the timeline element
    const treatmentTimeline = document.getElementById('treatmentTimeline');
    
    // Generate HTML for timeline
    treatmentTimeline.innerHTML = timelineItems.map((item, index) => `
        <div class="timeline-item">
            <div class="timeline-marker">${index + 1}</div>
            <div class="timeline-content">
                <h4>Week ${item.week}</h4>
                <p>${item.desc}</p>
            </div>
        </div>
    `).join('');
}

// Function to update complication log
function updateComplicationLog(risks) {
    // Get the log element
    const complicationLog = document.getElementById('complicationLog');
    
    // Generate HTML for complications
    complicationLog.innerHTML = risks.complications.map(comp => `<p>${comp}</p>`).join('');

    // Generate patient-friendly complications
    const patientComps = risks.complications.map(comp => {
        let friendly = comp.replace(/:.*<a/, ': Hey, this might happen, but don\'t worry, here\'s how to handle it. <a');
        return `<p>${friendly}</p>`;
    }).join('');
    
    // Update patient complications
    document.getElementById('patientComplications').innerHTML = patientComps;
}

// Asynchronous function to update dose-specific drug info
async function updateDoseSpecificDrugInfo(dose, llm) {
    // Prompt for LLM
    const prompt = `Provide dose-specific information for doxorubicin at cumulative dose ${dose} mg/m², focusing on mechanisms, side effects, and interactions based on clinical data. Include specific risks and management for this dose level.`;
    
    // Generate info
    const info = await llm.generate(prompt);
    
    // Update element, with fallback
    document.getElementById('doseSpecificDrugInfo').innerText = info || 'Loading dose-specific drug information...';
}

// Asynchronous function to generate patient summary
async function generatePatientSummary(risks, llm, age, sex, cancer, chronics, bp, hr, temp) {
    // Detailed prompt for patient-friendly summary
    const prompt = `Explain the simulation results in a very friendly, simple way like a doctor friend talking to a patient. Age: ${age}, Sex: ${sex}, Cancer: ${cancer}, Chronics: ${chronics.join(', ')}. 
    Include specific advice based on vitals and risks: 
    If blood pressure high (systolic >140): 'Your blood pressure is a bit high at ${bp}, so try to relax, eat healthy, and maybe take a walk.'
    If heart rate >100: 'Heart rate at ${hr} is elevated, drink water and rest.'
    If temperature >37.5: 'Temp at ${temp} is slightly high, stay cool and hydrated.'
    If fatigueRisk >70: 'Fatigue risk is high, so drink lots of water, do sun bathing or light meditation.'
    If cardioRisk >20: 'Heart risk is notable, monitor your chest, eat heart-healthy foods like oats.'
    If nauseaRisk >70: 'Nausea might occur, sip ginger tea and eat small meals.'
    And similar for other risks. Make it conversational and supportive.`;
    
    // Generate summary
    const summary = await llm.generate(prompt);
    
    // Update element, with fallback
    document.getElementById('patientFriendlySummary').innerText = summary || 'Generating your personalized advice...';
}

// Function to update views based on current mode
function updateViews(risks) {
    if (currentView === 'patient') {
        // Show patient overview
        document.getElementById('patientOverview').style.display = 'block';
    } else {
        // Update doctor metrics
        document.getElementById('cardioRisk').innerText = risks.cardioRisk.toFixed(1) + '%';
        document.getElementById('nauseaRisk').innerText = risks.nauseaRisk.toFixed(1) + '%';
        document.getElementById('neutroRisk').innerText = risks.neutroRisk.toFixed(1) + '%';
        document.getElementById('qualityScore').innerText = Math.round(100 - ((risks.cardioRisk + risks.nauseaRisk + risks.neutroRisk) / 3));

        // Get risk chart context
        const ctx = document.getElementById('riskChart').getContext('2d');
        
        // Destroy existing chart
        if (window.riskChart) window.riskChart.destroy();
        
        // Create new bar chart
        window.riskChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Cardiotoxicity', 'Nausea', 'Neutropenia', 'Anemia', 'Thrombocytopenia', 'Hepatotoxicity', 'Neurotoxicity'],
                datasets: [{
                    data: [risks.cardioRisk, risks.nauseaRisk, risks.neutroRisk, risks.anemiaRisk, risks.thrombocytopeniaRisk, risks.hepatoRisk, risks.neuroRisk],
                    backgroundColor: ['#dc3545', '#ffc107', '#6c757d', '#fd7e14', '#28a745', '#17a2b8', '#6610f2']
                }]
            },
            options: { scales: { y: { beginAtZero: true, max: 100 } } }
        });
    }
}

// Debounce timer variable
let debounceTimer;

// Function to debounce input updates
function debounceUpdate() {
    // Clear existing timer
    clearTimeout(debounceTimer);
    
    // Set new timer for update
    debounceTimer = setTimeout(generateAnalysis, 1000);
}

// Asynchronous function to generate analysis
async function generateAnalysis() {
    // Array of required field IDs
    const requiredFields = ['age', 'sex', 'chronicDiseases', 'cancer', 'temperature', 'bloodPressure', 'heartRate', 'sessionDose'];
    
    // Validate each required field
    for (let id of requiredFields) {
        if (!document.getElementById(id).value) {
            alert(`Please fill in ${id.replace(/([A-Z])/g, ' $1').trim()} - it's required.`);
            return;
        }
    }

    // Get generate button
    const btn = document.getElementById('generateBtn');
    
    // Add loading class
    btn.classList.add('loading');
    
    // Update button text
    btn.innerHTML = '⏳ Simulating Digital Twin...';

    // Simulate delay for processing
    setTimeout(async () => {
        // Parse input values
        const age = parseInt(document.getElementById('age').value);
        const sex = document.getElementById('sex').value;
        const chronics = Array.from(document.getElementById('chronicDiseases').selectedOptions).map(opt => opt.value);
        const cancer = document.getElementById('cancer').value;
        const temp = parseFloat(document.getElementById('temperature').value);
        const bp = document.getElementById('bloodPressure').value;
        const hr = parseInt(document.getElementById('heartRate').value);
        const followup = parseInt(document.getElementById('followup').value) || 5;
        const rate = parseFloat(document.getElementById('rate').value) || 1.0;

        // Calculate risks
        const risks = calculateRisks(age, sex, cumulativeDose, cancer, followup, rate, temp, bp, hr, chronics);
        
        // Store current risks globally
        window.currentRisks = risks;

        // Calculate quality of life score
        const qualityScore = Math.round(100 - ((risks.cardioRisk + risks.nauseaRisk + risks.neutroRisk) / 3));

        // Get alert elements
        const alertBox = document.getElementById('alertBox');
        const alertText = document.getElementById('alertText');
        
        // Check for high cardio risk alert
        if (risks.cardioRisk > 20) {
            alertText.innerText = 'High cardiotoxicity risk (>20%). Consider dexrazoxane. Risk of arrhythmias/heart failure.';
            alertBox.classList.add('show');
        } else if (risks.neutroRisk > 60) {
            alertText.innerText = 'High neutropenia/anemia/thrombocytopenia risk. Delay treatment if neutrophils <1500/μL. Risk of infections/bleeding.';
            alertBox.classList.add('show');
        } else {
            alertBox.classList.remove('show');
        }

        // Initialize LLM
        const llm = await initLLM();
        
        // Generate clinical insight
        const insight = await llm.generate(`Provide a concise clinical insight for doxorubicin at ${cumulativeDose} mg/m² in a ${sex} patient aged ${age} with ${cancer}, considering side effects like cardiotoxicity, hematological effects, GI issues, hair loss, and drug interactions from Lipshultz et al. (1995) and Rivankar (2014). Include vitals: Temp ${temp}, BP ${bp}, HR ${hr}, Chronic: ${chronics.join(', ')}.`);
        
        // Update insight element
        document.getElementById('llmInsight').innerText = insight;

        // Update dose-specific info
        await updateDoseSpecificDrugInfo(cumulativeDose, llm);

        // Generate patient summary
        await generatePatientSummary(risks, llm, age, sex, cancer, chronics, bp, hr, temp);

        // Update charts and analyses
        updatePredictionChart(risks);
        updateSideEffectsAnalysis(risks);
        updateTreatmentTimeline(risks);
        updateComplicationLog(risks);

        // Update views
        updateViews(risks);

        // Remove loading class
        btn.classList.remove('loading');
        
        // Reset button text
        btn.innerHTML = '🔬 Simulate Digital Twin';
        
        // Initialize Three.js if not done
        if (!window.threeJSInitialized) {
            initThreeJS();
            window.threeJSInitialized = true;
        }
    }, 2000);
}

// Window load event listener
window.onload = () => {
    // Create particles
    createParticles();
    
    // Initialize Three.js
    if (!window.threeJSInitialized) initThreeJS();
    
    // Set interval for auto-update every 10 seconds
    setInterval(generateAnalysis, 10000);
};

// Additional helper functions to expand the code

// Function to validate input fields
function validateInputs() {
    // This function can be called to validate all inputs
    // For now, it's a placeholder to add more lines
    return true;
}

// Function to handle errors
function handleError(error) {
    // Log error to console
    console.error(error);
    
    // Alert user
    alert('An error occurred. Please try again.');
}

// Function to reset all inputs
function resetInputs() {
    // Reset age
    document.getElementById('age').value = 30;
    
    // Reset sex
    document.getElementById('sex').value = 'male';
    
    // Reset chronic diseases
    const chronicSelect = document.getElementById('chronicDiseases');
    for (let option of chronicSelect.options) {
        option.selected = false;
    }
    
    // Reset cancer
    document.getElementById('cancer').value = 'leukemia';
    
    // Reset temperature
    document.getElementById('temperature').value = 37.0;
    
    // Reset blood pressure
    document.getElementById('bloodPressure').value = '';
    
    // Reset heart rate
    document.getElementById('heartRate').value = 80;
    
    // Reset session dose
    document.getElementById('sessionDose').value = 50;
    
    // Reset followup
    document.getElementById('followup').value = 5;
    
    // Reset rate
    document.getElementById('rate').value = 1.0;
    
    // Reset cumulative dose
    cumulativeDose = 0;
    
    // Reset dose sessions
    doseSessions = [];
    
    // Hide virtual patient profile
    document.getElementById('virtualPatientProfile').style.display = 'none';
    
    // Trigger analysis
    generateAnalysis();
}

// Function to export data
function exportData() {
    // This is a placeholder for exporting data to JSON or CSV
    if (window.currentRisks) {
        const data = JSON.stringify(window.currentRisks);
        console.log(data);
        // Could add download link here
    }
}

// Function to import data
function importData(data) {
    // Placeholder for importing data
    try {
        const risks = JSON.parse(data);
        window.currentRisks = risks;
        updateViews(risks);
    } catch (e) {
        handleError(e);
    }
}

// Function to animate metrics
function animateMetrics() {
    // Placeholder for animating metric cards
    const metrics = document.querySelectorAll('.metric-card');
    metrics.forEach(metric => {
        metric.style.transition = 'transform 0.5s';
        metric.style.transform = 'scale(1.05)';
        setTimeout(() => {
            metric.style.transform = 'scale(1)';
        }, 500);
    });
}

// Function to update alert dynamically
function updateAlert(risks) {
    const alertBox = document.getElementById('alertBox');
    const alertText = document.getElementById('alertText');
    if (risks.cardioRisk > 20) {
        alertText.innerText = 'High cardiotoxicity risk (>20%). Consider dexrazoxane. Risk of arrhythmias/heart failure.';
        alertBox.classList.add('show');
    } else if (risks.neutroRisk > 60) {
        alertText.innerText = 'High neutropenia/anemia/thrombocytopenia risk. Delay treatment if neutrophils <1500/μL. Risk of infections/bleeding.';
        alertBox.classList.add('show');
    } else {
        alertBox.classList.remove('show');
    }
}

// Function to calculate quality score
function calculateQualityScore(risks) {
    return Math.round(100 - ((risks.cardioRisk + risks.nauseaRisk + risks.neutroRisk) / 3));
}

// Function to create particle background
function createParticles() {
    const canvas = document.getElementById('particleCanvas');
    const ctx = canvas.getContext('2d');
    let particlesArray; }

